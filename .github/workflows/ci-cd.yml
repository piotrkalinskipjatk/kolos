name: CI/CD Pipeline for Calculator App

on:
  push:
    branches:
      - '**'

jobs:
  # (a) Linting and Unit Tests
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [unit-tests, linting]
    name: Run ${{ matrix.task }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        if: matrix.task == 'unit-tests'
        run: npm test

      - name: Run linter
        if: matrix.task == 'linting'
        run: npm run lint


  # (b) Build Docker Image
  build-image:
    runs-on: ubuntu-latest
    needs: [quality-check]
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t s26994/calculator:latest .

      - name: Save Docker image to archive
        run: docker save s26994/calculator:latest | gzip > calculator-app.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: calculator-app.tar.gz


  # (c) Deploy to Staging
  staging:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Simulate deployment to staging
        run: echo "Deployed to staging environment!"


  # (d) Triggered by Successful Staging & Docker Image Push
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [staging]
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    environment:
      name: production
      url: https://production.example.com
    steps:
      - uses: actions/checkout@v3

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image from archive
        run: gunzip -c calculator-app.tar.gz | docker load

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: s26994
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t s26994/calculator:latest .
          docker push s26994/calculator:latest


  # (e) Notification and Reporting
  notify:
    runs-on: ubuntu-latest
    needs: [quality-check, build-image, staging, deploy-prod]
    if: always()
    steps:
      - name: Create summary report
        run: |
          echo "CI/CD Pipeline Report" > raport.txt
          echo "----------------------------------" >> raport.txt
          echo "Branch: ${{ github.ref }}" >> raport.txt
          echo "Commit: ${{ github.sha }}" >> raport.txt
          echo "Time: $(date)" >> raport.txt
          echo "" >> raport.txt
          echo "Job Results:" >> raport.txt

          echo "- quality-check: ${{ needs.quality-check.result || 'skipped' }}" >> raport.txt
          echo "- build-image:   ${{ needs.build-image.result || 'skipped' }}" >> raport.txt
          echo "- staging:       ${{ needs.staging.result || 'skipped' }}" >> raport.txt
          echo "- deploy-prod:   ${{ needs.deploy-prod.result || 'skipped' }}" >> raport.txt

          echo "" >> raport.txt
          echo "Pipeline status: ${{ job.status }}" >> raport.txt

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: raport
          path: raport.txt